# This is the configuration file for PlatformIO, a cross-platform tool and IDE
# to build and develop software for embedded systems.
#
# To build the firmware with PlatformIO, install PlatformIO Core (CLI, no GUI):
# - https://docs.platformio.org/en/latest//core/installation.html
#
# For documentation on this file, see:
# - https://docs.platformio.org/en/latest/projectconf/index.html
#
# To add support for another STM32H7xx board, add a new [env:name..] section
# with the appropriate `board` and (optionally) `board_build.ldscript`.
# For a list of supported hardware, see:
# - https://docs.platformio.org/en/latest/platforms/ststm32.html
#
# To add support for additional grblHAL plugins or drivers, the necessary changes
# can be made to any of the following sections (see examples below);
# - common settings, which will apply to all builds
# - feature specific settings that can be included per board
# - board specific settings
#
# By default this file sets the preprocessor directive `OVERRIDE_MY_MACHINE`
# to ignore all settings in `Inc/my_machine.h`.  Instead, you should edit this
# file and add the necessary directives (e.g. `-D FOOBAR_ENABLE`) to either
# `common.build_flags` or the environment specific `build_flags`.
#
# Typical command line usage:
#
#    # Build firmware for all defined environments
#    pio run
#    # Build only for specific environments with the -e option
#    pio run -e nucleo_h743_reference
#    # List the freshly built firmware ELF (.elf) and binary (.bin) files:
#    ls -l .pio/build/*/firmware.*
#    # If the target supports uploading (via `upload_protocol`):
#    pio run -e nucleo_h743_reference -t upload
#    # Clean up build related resources
#    pio run -t clean
#

[platformio]
include_dir = Inc
src_dir = Src

# Common build settings that apply to all environments, see my_machine.h for examples
[common]
build_flags =
  -I .
  -I boards
  # Enable L1 cache and associated cache maintenance functions
  -D L1_CACHE_ENABLE=1
  # Ignore all settings in Inc/my_machine.h (and instead use the below build flags)
  -D OVERRIDE_MY_MACHINE
  # Uncomment to enable debug builds
  #-D DEBUG
  -Wl,-u,_printf_float
  -Wl,-u,_scanf_float
lib_deps =
  grbl
  boards
  plugins
  #bluetooth
  #keypad
  #laser
  #motors
  #trinamic
  #odometer
  #spindle
lib_extra_dirs =
  .

# Build settings for SD card support, include in board environments as needed
[sdcard]
build_flags =
  -D SDCARD_ENABLE=1
  -I Middlewares/Third_Party/FatFs/src
  -I FATFS/Target
  -I FATFS/App
lib_deps =
  sdcard
  FATFS/App
  FATFS/Target
  Middlewares/Third_Party/FatFs
lib_extra_dirs =

# Build settings for USB serial support, include in board environments as needed
[usb]
build_flags =
  -D USB_SERIAL_CDC=1
  -I Middlewares/ST/STM32_USB_Device_Library/Class/CDC/Inc
  -I Middlewares/ST/STM32_USB_Device_Library/Core/Inc
  -I USB_DEVICE/Target
  -I USB_DEVICE/App
lib_deps =
  USB_DEVICE/App
  USB_DEVICE/Target
  Middlewares/ST/STM32_USB_Device_Library/Class
  Middlewares/ST/STM32_USB_Device_Library/Core
lib_extra_dirs =

# BTT SKR 3 with USB serial, SD card, and Trinamic 5160 driver support
[env:btt_skr_30_h743_tmc5160]
platform = ststm32
board = generic_stm32h743vi
board_build.ldscript = STM32H743VITX_FLASH.ld
framework = stm32cube
upload_protocol = dfu
build_flags =
    ${common.build_flags}
    ${usb.build_flags}
    ${sdcard.build_flags}
    -D BOARD_BTT_SKR_30
    -D HSE_VALUE=25000000
    -D TRINAMIC_ENABLE=5160
    -D SPINDLE_LASER_USE_PWM=1  ; Enables laser PWM support
    -D SPINDLE_PWM_PIN=GPIO_PIN_8  ; Set PWM pin (PA8 for HE0)
    -D SPINDLE_PWM_PORT=GPIOA
    -D SPINDLE_ENABLE_PIN=GPIO_PIN_9  ; Laser enable pin (PA9 for HE1)
    -D SPINDLE_ENABLE_PORT=GPIOA
lib_deps =
    ${common.lib_deps}
    ${usb.lib_deps}
    ${sdcard.lib_deps}
    motors
    trinamic
lib_extra_dirs =
    ${common.lib_extra_dirs}
    ${usb.lib_extra_dirs}
    ${sdcard.lib_extra_dirs}
monitor_speed = 115200
